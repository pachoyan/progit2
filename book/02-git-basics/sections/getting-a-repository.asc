[[_getting_a_repo]]
=== Obtenir un repositori Git

Podem obtenir un projecte Git a partir de dos mètodes principals.
El primer importa a Git un projecte o directori ja existent.
Mentre que el segon clona un repositori Git ja existent des de un altre servidor.

==== Inicialitzar un repositori a un directori ja existent

En cas que comencem a fer el seguiment d'un projecte ja existent a Git necessitem anar al directori del projecte.
Si és el primer cop que ho fem, procedirem d'una forma diferent en cada sistema operatiu:

En Linux:
[source,console]
----
$ cd /home/user/your_repository
----
en Mac:
[source,console]
----
$ cd /Users/user/your_repository
----
en Windows:
[source,console]
----
$ cd /c/user/your_repository
----

i escrivim:

[source,console]
----
$ git init
----

Fent això creem un nou subdirectori anomenat `.git` que conté tots els nostres fitxers necessaris per al repositori, un esquelet d'un repositori Git. En aquest punt, encara no hi ha haurà res del nostre projecte amb seguiment.
(Podem consultar <<_git_internals>> per saber exactament quins fitxers estaran continguts al directori `.git` que acabem de crear.)(((git commands, init)))

Si volem començar a controlar versions de fitxers existents (a diferència d'un directori buit), haurem de posar en seguiment aquests fitxers i fer una confirmació inicial.
Podem aconseguir-ho amb unes poques  ordres `git add` per especificar els fitxers que volem posar en seguiment, seguits de `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

Ara podem dir que tenim un repositori amb fitxers amb seguiment i una confirmació inicial.
Més tard ja revisarem què fan aquestes ordres. 

[[_git_cloning]]
==== Clonar un repository existent

Si volem obtenir una còpia d’un repositori Git existent, per exemple un projecte al que volem contribuir, necessitem l’ordre `git clone`.
Si ja estem familiaritzats amb altres sistemes de versió de control com “Subversion” notem que l’ordre és “clone” enlloc de “checkout”.
Es tracta d’una distinció important ja que enlloc d’obtenir una còpia per editar, Git rep una còpia completa de totes les dades del servidor.
Quan executem `git clone`, per defecte se'ns baixen totes les versions de cada fitxer de l'historial.
De fet, si el disc del nostre servidor es corromp, podem fer servir pràcticament qualsevol còpia de qualsevol client per restaurar el servidor al moment en que el vam clonar (pot ser perdem alguns _hooks_ del costat del servidor i altres, però tota la informació versionada romandrà allà. Podem veure <<_git_on_the_server>> per una informació més detallada)

Podem clonar un repositori amb `git clone [url]`.(((git commands, clone)))
Per exemple, si volem clonar una llibreria Git anomenda libgit2, farem:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Amb això creem un directori anomenat ``libgit2'', inicialitzem un directori `.git` a dintre seu, descarreguem totes les dades d’aquest repositori i treiem una copia de treball de l’última versió.
Si anem al nou directori `libgit2` ens trobarem amb els fitxers del projecte, preparats per poder fer-los servir.
Si volem clonar el repositori amb un altre nom diferent a ``libgit2'', ho podem especificar amb la següent opció de la línia de comandes:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Aquesta ordre fa exactament el mateix que l’ordre anterior, però el directori de destinació l’hem anomenat `mylibgit`.

Git ens permet utilitzar diferents protocols de transferència.
L’exemple anterior fa ús del protocol `https://`, però també ens podem trobar amb `git://` o `user@server:path/to/repo.git` que fa servir el protocol de transferència SSH.
Al capítol <<_git_on_the_server>> introduïrem totes les opcions disponibles per a configurar el nostre repositori Git i comentarem els avantatges i inconvenients de cadascuna.
