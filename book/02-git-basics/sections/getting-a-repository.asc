[[_getting_a_repo]]
=== Obtenir un repositori Git

Podem obtenir un projecte Git a partir de dos mètodes principals.
El primer importa a Git un projecte o directori ja existent.
Mentre que el segon clona un repositori Git ja existent des de un altre servidor.

==== Inicialitzar un repositori a un directori ja existent

En cas que comencem a fer el seguiment d'un projecte ja existent a Git necessitem anar al directori del projecte.
Si és el primer cop que ho fem, procedirem d'una forma diferent en cada sistema operatiu:

En Linux:
[source,console]
----
$ cd /home/user/your_repository
----
en Mac:
[source,console]
----
$ cd /Users/user/your_repository
----
en Windows:
[source,console]
----
$ cd /c/user/your_repository
----

i escrivim:

[source,console]
----
$ git init
----

Fent això creem un nou subdirectori anomenat `.git` que conté tots els nostres fitxers necessaris per al repositori, un esquelet d'un repositori Git. En aquest punt, encara no hi ha haurà res del nostre projecte amb seguiment.
(Podem consultar <<_git_internals>> per saber exactament quins fitxers estaran continguts al directori `.git` que acabem de crear.)(((git commands, init)))

Si volem començar a controlar versions de fitxers existents (a diferència d'un directori buit), haurem de posar en seguiment aquests fitxers i fer una confirmació inicial.
Podem aconseguir-ho amb unes poques  ordres `git add` per especificar els fitxers que volem posar en seguiment, seguits de `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

Ara podem dir que tenim un repositori amb fitxers amb seguiment i una confirmació inicial.
Més tard ja revisarem què fan aquestes ordres. 

[[_git_cloning]]
==== Cloning an Existing Repository

If you want to get a copy of an existing Git repository – for example, a project you'd like to contribute to – the command you need is `git clone`.
If you're familiar with other VCS systems such as Subversion, you'll notice that the command is "clone" and not "checkout".
This is an important distinction – instead of getting just a working copy, Git receives a full copy of nearly all data that the server has.
Every version of every file for the history of the project is pulled down by default when you run `git clone`.
In fact, if your server disk gets corrupted, you can often use nearly any of the clones on any client to set the server back to the state it was in when it was cloned (you may lose some server-side hooks and such, but all the versioned data would be there – see <<_git_on_the_server>> for more details).

You clone a repository with `git clone [url]`.(((git commands, clone)))
For example, if you want to clone the Git linkable library called libgit2, you can do so like this:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

That creates a directory named ``libgit2'', initializes a `.git` directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version.
If you go into the new `libgit2` directory, you'll see the project files in there, ready to be worked on or used.
If you want to clone the repository into a directory named something other than ``libgit2'', you can specify that as the next command-line option:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

That command does the same thing as the previous one, but the target directory is called `mylibgit`.

Git has a number of different transfer protocols you can use.
The previous example uses the `https://` protocol, but you may also see `git://` or `user@server:path/to/repo.git`, which uses the SSH transfer protocol.
<<_git_on_the_server>> will introduce all of the available options the server can set up to access your Git repository and the pros and cons of each.
