[[_first_time]]
=== Configurant Git per primera vegada

Ara que tenim Git al teu sistema voldrem fer algunes coses per a personalitzar el nostre entorn de Git.
Haurem de fer aquesta configuració només una vegada al nostre ordinador, i es mantindran entre actualitzacions.
També podem canviar-ho tornant a executar les mateixes ordres una altra vegada.

Git porta una eina anomenada `git config` que ens permet obtenir i establir les variables de configuració que controlen l'aspecte i funcionament de Git.(((git commands, config)))
Aquestes variables poden emmagatzemar-se en tres diferents llocs:

1. Arxiu `/etc/gitconfig`: conté els valor de cada usuari al sistema i els seus repositoris.
Si passem les opcions `--system` a `git config` llegeix i escriu específicament  en aquest arxiu.
2. L'arxiu `~/.gitconfig` o `~/.config/git/config`: és específic del nostre usuari.
Pots fer que Git llisca o escrigui específicament a aquest arxiu passant l'opció `--global`.
3. L'arxiu `config` al directori de Git o qualsevol repositori que estiguem usant actualment:
És específic d'aquest repositori.

Cada nivell sobreescriu els valors del nivell anterior, així que els valors a l'arxiu `.git/config` sobreescriuen els de l'arxiu `/etc/gitconfig`.

En sistemes Windows, Git busca l'arxiu `.gitconfig` `.gitconfig` al directori `$HOME` (`C:\Users\$USER` per a la majoria).
A més, busca l'arxiu `/etc/gitconfig`, encara que és relatiu a l'arrel MSys, la qual és on decidim instal·lar Git al nostre sistema Windows quan llancem l'instal·lador.
Si estem usant la versió 2.x o posterior de Git per a Windows, també hi ha un arxiu de configuració a nivell de sistema en `C:\Documents and Settings\All Users\Application Data\Git\config` en Windows XP, i en `C:\ProgramData\Git\config` en Windows Vista o nous.
Aquest arxiu de configuració només pot ser canviat com a administrador per l'ordre `git config -f <file>`.

==== La teva identitat

La primera cosa que hem de fer quan instal·lem Git és establir el nostre nom d'usuari i l'adreça del nostre correu electrònic.
Això és important perquè cada confirmació (commit) de Git usa aquesta informació, i s'introdueix de manera immutable als commits que enviem:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Una altra vegada, necessitem fer-ho una vegada si passem l'opció `--global` perquè Git sempre utilitza aquesta informació per qualsevol cosa que fem en aquest sistema.
Si volem sobreescriure aquesta configuració amb un nom o correu electrònic per projectes específics podem usar l'ordre sense l'opció `--global` quan ens trobem en aquest projecte.

La majoria de les eines d'interfície d'usuari ens ajudaran a fer-ho quan les executem per primera vegada.

==== El teu editor

Una vegada que la nostra identitat està configurada, podem configurar l'editor de text per defecte que Git usarà quan necessitem introduir un missatge.
Si no, Git usarà l'editor del sistema per defecte.

Si volem usar un editor de text diferent, com Emacs, podem fer el següent:

[source,console]
----
$ git config --global core.editor emacs
----

Mentre a sistemes de Windows, si volem usar un editor de text diferent, com Notepad++, podem fer el següent:

En un sistema x86
[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----
En un sistema x64
[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[NOTE]
====
Vim, Emacs i Notepad++ són editors de text utilitzats pels desenvolupadors molt de sovint en sistemes basats en Unix com Linux o OS X o en sistemes Windows.
Si no estem familiaritzats amb qualsevol d'aquests editors, podem necessitar buscar les instruccions específiques de com establir el nostre editor preferit amb Git.
====

[WARNING]
====
Podem buscar, si no volem configurar un editor com aquest, pot ser que ens confonguem quan els executem.
Per exemple en un sistema de Windows pot incloure una operació acabada prematurament durant una edició de Git iniciada.
====

==== Comprovar la configuració

Si volem comprovar la nostra configuració, podem usar l'ordre `git config --list` per a llistar tota la configuració que Git pot trobar en aquest punt:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Podem veure claus repetides, ja que Git llegeix la mateixa clau de diferents arxius (`/etc/gitconfig` i `~/.gitconfig`, per exemple).
En aquest cas, Git usa l'últim valor per a cada clau única que veu.

També podem comprovar que clau utilitzarà Git per a una clau específica executant `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----
