=== Sobre el Control de Versions

(((version control)))
Què és el "control de versions", i per t'ha d'importar?
El control de versions es un sistema que registra els canvis en un o diversos arxius a llarg de temps, així pot recuperar versions específiques més avant.
Per exemple, en aquest llibre usarás codi font amb fixers amb els arxius sent registrats per una eina de control de version, encara que pot fer-ho en qualsevol tipus de arxiu en un ordinador.

Si eres un disenyador web o gràfic i vols mantindre cada versió de una imatge o diseny (i segur que vols), es molt aconsellable usar un Sistema de Control de Versions (VCS).
Et permet revertir els arxius a un estat anterior, revertir el projecte senser a un estat anterior, comparar canvis al llarg del temps, vore qui ha modificat algo que pot causar un problema, qui ha introduït un problema i quan, i molt més.
Usar un VCS també significa que si perd coses pot recuperarles fàcilment.
A més, ho aconsegueixes a canvi de molt poc.

==== Sistemes de Control de Versions Local

(((version control,local)))
Molta gent el mètode d'elecció es copiar arxius a un altre directori (pot ser un directori amb data i hora, si són intel·ligents).
Aquest mètode es molt comú, ja que és molt sencill, però també és molt propens a errors.
Es fàcil oblidar el directori en el que està i accidentalment escriure en el arxiu equivocat o copiar sobre arxius que no vol. 

Per a tractar aquest problema, els programadors van desenvolupar el VCS local que simplement tenia una base de dades que guardava tots els canvis baix un control de revisió.

.Conrol de versio local.
image::images/local.png[Local version control diagram]

Una de les eines de VCS més populars era el sistema RCS, el qual encara es distribueix en molts ordinadors actualment.
Fin i tot el sistema operatiu Mac OS X inclueix la comanda `rcs` quan instal·les Eines de Desenvolupador.
RCS funciona registrant 
RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.

==== Centralized Version Control Systems

(((version control,centralized)))
The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems, such as CVS, Subversion, and Perforce, have a single server that contains all the versioned files, and a number of clients that check out files from that central place. (((CVS)))(((Subversion)))(((Perforce)))
For many years, this has been the standard for version control.

.Centralized version control.
image::images/centralized.png[Centralized version control diagram]

This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what; and it's far easier to administer a CVCS than it is to deal with local databases on every client.

However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything – the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCS systems suffer from this same problem – whenever you have the entire history of the project in a single place, you risk losing everything.

==== Distributed Version Control Systems

(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files: they fully mirror the repository.
Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it.
Every clone is really a full backup of all the data.

.Distributed version control.
image::images/distributed.png[Distributed version control diagram]

Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
