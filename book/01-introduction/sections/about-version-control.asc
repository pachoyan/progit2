=== Sobre el Control de Versions

(((version control)))
Què és el "control de versions", i per que t'ha d'importar?
El control de versions es un sistema que registra els canvis en un o diversos arxius al llarg del temps, així pots recuperar versions específiques més avant.
Per exemple, en aquest llibre s'usa codi font amb fixers amb els arxius sent registrats per una eina de control de version, encara que pot fer-se en qualsevol tipus de arxiu a un ordinador.

Si eres un disenyador web o gràfic i vols mantindre cada versió d'una imatge o disseny (i de segur que vols), és molt aconsellable usar un Sistema de Control de Versions (VCS).
Et permet revertir els arxius a un estat anterior, revertir el projecte senser a un estat anterior, comparar canvis al llarg del temps, vore qui ha modificat ho ha modificat i que pot causar un problema, qui ha introduït un problema i quan, i molt més.
Usar un VCS també significa que si perds coses pots recuperar-les fàcilment.
A més, ho aconsegueixes a canvi de molt poc.

==== Sistemes de Control de Versions Local

(((version control,local)))
Per a molta gent, el mètode d'elecció es copiar arxius a un altre directori (pot ser un directori amb data i hora, si són intel·ligents).
Aquest mètode es molt comú, ja que és molt sencill, però també és molt propens a errors.
Es fàcil oblidar el directori al que està i accidentalment escriure en el arxiu equivocat o copiar sobre arxius que no vol. 

Per a tractar aquest problema, els programadors van desenvolupar el VCS local que simplement tenia una base de dades que guardava tots els canvis baix un control de revisió.

.Conrol de versió local.
image::images/local.png[Local version control diagram]

Una de les eines de VCS més populars era el sistema RCS, què encara es distribueix a molts ordinadors.
Fins i tot el sistema operatiu Mac OS X inclueix la comanda `rcs` quan instal·les Eines de Desenvolupador.
RCS funciona registrant conjunts de pegats (les diferències entre els arxius) en un format especial en el disc i pot tornar a crear els arxius com eren abans mitjançant la suma de tots els pegats.

==== Sistemes Centralitzats de Control de Versions

(((version control,centralized)))
El següent problema més important és que la gent necessita col·laborar amb altres desenvolupadors a altres sistemes.
Per a tractar aquest problema, es va desenvolupar els Sistemes Centralitzats de Control (CVCSs) de Versions
Aquests sistemes, com CVS, Subversion i Perforce tenen un únic servidor que conté tots els arxius versionats, i els clients descarreguen els arxius des d'aquest lloc. 
Aquest, ha estat l'estàndard durant anys.

.control de versions centralitzat.
image::images/centralized.png[Centralized version control diagram]

Aquest control de versions ofereix moltes advantatges respecte dels VCSs locals.
Per exemple, tots saben mes o menys que estan fent els demés al projecte.
Els administradors, tenen un control precís sobre qui pot fer què i es molt més fàcil administrar un CVCS que la base de dades local de cada client.



No obstant això, aquesta configuració també té alguns desavantatges serioses.
El més obvi és el punt únic de fallada que el servidor centralitzat representa.
Si aquest servidor deixa de funcionar durant una hora, aleshores ningú pot col·laborar o registrar canvis versionats de cap arxius al que estan treballant.
Si el disc dur de la base de dades central es corromp, i no s'han fet còpies de seguretat, ho perds tot - la història sensera del projecte excepte instances que la gent tinga en les seves màquines locals.
Sistemes locals de VCS tenen aquest mateix problema - si tens tota la història del projecte en un únic lloc, tens el risc de pedre-ho tot.

==== Sistemes de control de versions distribuït

(((version control,distributed)))
Ací és on el Sistemes de Control Distribuït Version (DVCSs) passa a l'acció.
A un DVCS (com Git, Mercurial Bazaar o Darcs), els clients no sols descarreguen les últimes instancies dels archius sino una copia sensera del repositori.
Així, si un servidor deixa de funcionar i aquests sistemes estaven colaborant a través d'ell, algún dels repositoris dels clients pot ser copiat per a restaurar el servidor. 
Cada clonació és realment una copia sensera de totes les dades.

.Control de Versions Distribuït.
image::images/distributed.png[Distributed version control diagram]

A més, molts d'aquests sistemes tracten perfectament tindre més d'un repositori remot al que poden treballar, així pots col·laborar amb diferent grups de gent en diferent maneres a la vegada al mateix projecte.
Açó permet configurar varios tipus de fluxos de treball que no serien possibles en sistemes centralitzats, com models jeràrquics
