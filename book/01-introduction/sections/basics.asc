=== Fonaments de Git

Que és git en poques paraules?
Aquesta secció es important, perquè si entens que és Git i els fonaments de com funciona, aleshores utilitzar Git serà molt més fácil.
A mesura que aprens git, tracta d'aclarir les coses que ja saps the altres VCSs, com Subversion i Perforce, fent-ho t'ajudarà a evitar petites confusions sobre quan utilizar aquesta eina.
Git emmagatzema i maneja molt diferent la informació en comparació a aquests altres sistemes, encara que la interfície d'usuari is molt similar, i entendre aquestes diferències t'ajudará a prevenir que el confonguis mentre ho utilitzes.(((Subversion)))(((Perforce)))

==== Còpies Instantànies, Sense Difèrencies

La major diferència entre Git i altres VCS (Subversion i amics) es la manera que Git maneja les seves dades.
Conceptualment, la majoria dels sistemes emmagatzemen la infromació com una llista de canvis en els arxius.
Aquests sistemes (CVS, Subversion, Perforce, Bazaar i etcètera) manegen la informació que emmagatzemen com un conjunt de arxius i el els canvis fets a cada arxiu al llarg del temps.

.Storing data as changes to a base version of each file.
image::images/deltas.png[Storing data as changes to a base version of each file.]

Git no maneja ni emmagatzema les seues dades d'aquesta manera. En canvi, Git maneja més les dades com un conjunt de còpies instantànies d'un sistema d'arxius en miniatura.
Cada vegada que confirmes un canvi, o guardes l'estat del teu projecte a Git, bàsicament pren una instantània del aspecte dels teus arxius en aquest moment i emmagatzema una referència a aquesta instantània.
Per ser eficient, si els arxius no han canviat, Git no emmagatzema el arxiu un altra vegada, només un enllaç al anterior arxiu idèntic que te emmagatzemat.
Git maneja les dades més com una *secuència de instantànies*.


.Storing data as snapshots of the project over time.
image::images/snapshots.png[Git stores data as snapshots of the project over time.]

Això es una diferència important entre Git i gairebé els altres VCSs.
Fa que Git reconsidere casi cada aspecte dels control de versions que altres sistemes van copiar de la generació anterior.
Això fa que Git sigui més com un mini sistema d'arxius amb eines increïblement poderoses desenvolupades sobre ell, en comparació a un VCS simple.
Explorarem alguns dels beneficis que obtens al manejar les dades d'aquesta manera quan veiem la ramificació (branching) en Git <<_git_branching>>.

==== Casi totes les operacions són locals

La majoria d'operacions en Git només necessiten arxius locals i recursos locals per operar - generalment cap informació es necessària d'un altre ordeinador de la teva xarxa.
Si estas acostumat a CVCS on la majoria de les operacions tenen el cost afegit del retard de la xarxa, aquest aspecte en Git et farà pensar que els déus de la velocitat han beneït a Git amb poders sobrenaturals.
Ja que tens la història sencera del projecte al teu disc local, la majoria de les operacions pareixen casi instànies.

Per exemple, per navegar per la història del projecte Git no necessita utilitzar el servidor per a obtindre la història i mostrartela - simplement llegeix directament de la teua base de dades en local.
Això significa que pots vore la història del teu projecte casi instantàniament.
Si vols vore els canvis introduïts entre la versió actual d'un arxiu i l'arxiu fa un mes, Git pot mirar el arxiu com era fa un mes i fer un càlcul local de la diferència, en lloc de fer una petició a un servidor remote u obtindre una versió antiga del arxiu d'un servidor remote per a fer-ho localment.

Això també significa que hi ha molt poc que no pots fer si estàs desconnectat o sense VPN.
Si estàs en un avió o un tren i vols fer un petit treball, tambó pots confirmar fins que el connectis a  una xarxa per penjar els canvis.
Si vas a casa i no tens un client VPN que funcione correctament, pots seguir treballant.
En altres sistemes, fer-ho es casi imposible o dolent.
En Perforce, per exemple, no pots fer molt si no estàs connectat al servidor, i en Subversion i CVS, pots editar arxius, pero no pots confirmar canvis a la teua base de dades (ja que la teua base de dades està desconnectada).
Aixo pot no semblar un gran problema, però potser et sorpengues la difèrencia que pot fer.

==== Git té integritat

Tot en git es verificat mitjançant una suma de comprobació (check-sum en anglés) abans de ser emmagatzemat, i s'identifica a partir d'aquest moment mitjançant aquesta suma.
Això vol dir que es impossible canviar els continguts de qualsevol arxiu o directory sense que Git sàpia sobre ells.
Aquesta funcionalitat està integrada en Git al més baix nivell i és part integral de la seva filosofia.
No pots perdre informació en trànsit o obtindre un arxiu corrupte sense que Git siga capaç de detectar-lo.

El mecanisme que Git usa per fer aquesta suma de comprobació s'anomena SHA-1 hash.(((SHA-1)))
Es tracta de una cadena de 40 caracters hexadecimals (0-9 i a-f) i es calcula basant-se en els continguts del arxiu o estructura del directori en Git. Un hash SHA-1 es veu de la següent forma:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Voràs aquests valors hash molt sovint en Git, ja que els fa servir moltes vegades.
De fet, Git emmagatzema tot a la seua base de dades per el valor hash dels continguts en compte del nom de l'arxiu.


==== Git generalment només afegeix informació

Quan realitzes accions en Git, casi totes elles només afegeixen informació a la base de dades de Git.
Es molt difícil que el sistema faja algo que no es puga esmenar o que borre la informació. Com qualsevol VCS, pots perdre o estropejar canvis que encara no has confirmat, però una vegada has confirmat una instantània en Git, es molt difícil perder-ho, especialment si regularment envies la teua base de dades a un servidor amb regularitat.

Això fa que usar Git siga un plaer, perquè sabem que podem experimentar sense estropejar greument les coses.
Per a un anàlisi més exhastiu de com Git emmagatzema  la teva informació i com pots reuperar les dades aparentment perdues, veure <<_undoing>>.

==== Els tres estats

Ara, presta atenció.
Açò es el més important que has de recordar sobre Git si vols que el teu procés de aprenentatge prossegeuixi sense problemes.
Git té tres estats principals en els que es poden trobar les teves dades: confirmat (commited), modificat (modified) i preparat (staged).
Confirmat significa que les dades s'han emmagatzemant de manera segura en la teua base de dades loal.
Modificat significa que has modificat un arxiu pero que encara no has confirmat els canvis en la teua base de dades.
Preparat vol dir que has modificat un arxiu i l'has marcat per a fer la teua pròxima confirmació.

Aixo ens porta a les tres seccions principals d'un projecte de Git: el directori de Git (git directory), el directori de treball (the working tree) i l'àrea de preparació (staging area).


.Working tree, staging area, and Git directory.
image::images/areas.png["Working tree, staging area, and Git directory."]

El directori de git es on Git emmagatzema les metadades i la base de dades per al teu projecte.
Açó es la part més important de Git, i és el que es còpia cuan clones un repositori des d'un altre ordinador.

El directori de treball és una còpia d'una versió del projecte.
Aquests arxius es treuen de la base de dades comprimida en el directori de Git, i es col·loquen en el disc per a que pugues usar-los o modificar-los.

L'àrea de preparació es un arxiu, generalment al teu directori de Git, que emmagatzema la infromació sobre lo que anirà a la teua pròxima confirmació.
De vegades es denomina índex (``index''), però tambè és comú referir-se a ell com l'àrea de preparació.

El flux de treball bàsic de Git seria així:

1. Modifiques els arxius en la teva àrea de treball.
2. Prepares els arxius, afegint-los a l'àrea de preparació.
3. Confirmes els canvis, i Git pren els arxius tal i com estan en l'àrea de preparació i emmagatzema aquesta instantània de manera permanent en el directori de Git.

Si una versió particular d'un arxiu és al directori de Git, es considera confirmada (commited).

Al capítol <<_git_basics_chapter>>, aprendrás més d'aquests tres estats

If a particular version of a file is in the Git directory, it's considered committed.
I si s'ha canviat des que va ser confirmar, però no ha s'afegit a l'àrea de preparació, l'arxius està modificat.
Al capítol <<_git_basics_chapter>> aprendrás més d'aquests tres estats i com pots prendre ventaja d'ells u ometre els canvis preparats per complet.

