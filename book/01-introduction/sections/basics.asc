=== Fonaments de Git

Que és git en poques paraules?
Aquesta secció és important, perquè si entenem que és Git i els fonaments de com funciona, aleshores utilitzar Git serà molt més fàcil.
A mesura que aprenem git, tractarem d'aclarir les coses que ja sabem, d'altres VCSs, com Subversion i Perforce, fent-ho ens ajudarà a evitar petites confusions sobre quan utilitzar aquesta eina.
Git emmagatzema i maneja molt diferent la informació en comparació a aquests altres sistemes, encara que la interfície d'usuari és molt similar, i entendre aquestes diferències ens ajudarà a prevenir que el confonguem mentre ho utilitzem.(((Subversion)))(((Perforce)))

==== Còpies Instantànies, sense diferències

La diferència més gran entre Git i altres VCS (Subversion i amics) és la manera que Git maneja les seves dades.
Conceptualment, la majoria dels sistemes emmagatzemen la informació com una llista de canvis en els arxius.
Aquests sistemes (CVS, Subversion, Perforce, Bazaar i etcètera) manegen la informació que emmagatzemen com un conjunt d'arxius i en els canvis fets a cada arxiu al llarg del temps.

.Storing data as changes to a base version of each file.
image::images/deltas.png[Storing data as changes to a base version of each file.]

Git no maneja ni emmagatzema les seves dades d'aquesta manera. En canvi, Git maneja més les dades com un conjunt de còpies instantànies d'un sistema d'arxius en miniatura.
Cada vegada que confirmem un canvi, o guardem l'estat del nostre projecte a Git, bàsicament pren una instantània de l'aspecte dels nostres arxius en aquest moment i emmagatzema una referència a aquesta instantània.
Per ser eficient, si els arxius no han canviat, Git no emmagatzema l'arxiu una altra vegada, només un enllaç a l'anterior arxiu idèntic que té emmagatzemat.
Git maneja les dades més com una *seqüència d'instantànies*.


.Storing data as snapshots of the project over time.
image::images/snapshots.png[Git stores data as snapshots of the project over time.]

Això és una diferència important entre Git i gairebé els altres VCSs.
Fa que Git reconsideri quasi cada aspecte dels controls de versions que altres sistemes van copiar de la generació anterior.
Això fa que Git sigui més com un petit sistema d'arxius amb eines increïblement poderoses desenvolupades sobre ell, en comparació a un VCS simple.
Explorarem alguns dels beneficis que obtens en manejar les dades d'aquesta manera quan veiem la ramificació (branching) en Git <<_git_branching>>.

==== Quasi totes les operacions són locals

La majoria d'operacions en Git només necessiten arxius locals i recursos locals per operar - generalment cap informació és necessària d'un altre oreinador de la nostra xarxa.
Si estem acostumats a CVCS on la majoria de les operacions tenen el cost afegit del retard de la xarxa, aquest aspecte en Git ens farà pensar que els déus de la velocitat han beneït a Git amb poders sobrenaturals.
Ja que tenim la història sencera del projecte al teu disc local, la majoria de les operacions pareixen quasi instantànies.

Per exemple, per navegar per la història del projecte Git no necessita utilitzar el servidor per a obtenir la història i mostrar-la - simplement llegeix directament de la nostra base de dades en local.
Això significa que podem veure la història del nostre projecte quasi instantàniament.
Si volem veure els canvis introduïts entre la versió actual d'un arxiu i l'arxiu fa un mes, Git pot mirar l'arxiu com era fa un mes i fer un càlcul local de la diferència, en lloc de fer una petició a un servidor remot u obtenir una versió antiga de l'arxiu d'un servidor remot per a fer-ho localment.

Això també significa que hi ha molt poc que no podem fer si estem desconnectats o sense VPN.
Si estem en un avió o un tren i volem fer un petit treball, també podem confirmar fins que ens connectem a una xarxa per penjar els canvis.
Si anem a casa i no tenim un client VPN que funcioni correctament, podem seguir treballant.
En altres sistemes, fer això és quasi impossible o és dolent.
En Perforce, per exemple, no podem fer molt si no estem connectats al servidor, i en Subversion i CVS, podem editar arxius, però no podem confirmar canvis a la nostra base de dades (ja que la nostra base de dades està desconnectada).
Això pot no semblar un gran problema, però potser ens sorprèn la diferència que pot fer.

==== Git té integritat

Tot en git és verificat mitjançant una suma de comprovació (check-sum en anglès) abans de ser emmagatzemat, i s'identifica a partir d'aquest moment mitjançant aquesta suma.
Això vol dir que és impossible canviar els continguts de qualsevol arxiu o directori sense que Git sàpiga sobre ells.
Aquesta funcionalitat està integrada en Git al més baix nivell i és part integral de la seva filosofia.
No podem perdre informació en trànsit u obtenir un arxiu corrupte sense que Git sigui capaç de detectar-lo.

El mecanisme que Git usa per fer aquesta suma de comprovació s'anomena SHA-1 hash.(((SHA-1)))
Es tracta d'una cadena de 40 caràcters hexadecimals (0-9 i a-f) i es calcula basant-se en els continguts de l'arxiu o estructura del directori en Git. Un hash SHA-1 es veu de la següent forma:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Veurem aquests valors hash molt sovint en Git, ja que els fa servir moltes vegades.
De fet, Git emmagatzema tot a la seva base de dades pel valor hash dels continguts en compte del nom de l'arxiu.


==== Git generalment només afegeix informació

Quan realitzem accions en Git, quasi totes elles només afegeixen informació a la base de dades de Git.
És molt difícil que el sistema faci alguna cosa que no es pugui esmenar o que esborri la informació. Com qualsevol VCS, podem perdre o desbaratar canvis que encara no hem confirmat, però una vegada hem confirmat una instantània en Git, és molt difícil que ho perdem, especialment si regularment enviem la nostra base de dades a un servidor amb regularitat.

Això fa que usar Git sigui un plaer, perquè sabem que podem experimentar sense desbaratar greument les coses.
Per a una anàlisi més exhaustiu de com Git emmagatzema  la nostra informació i com podem recuperar les dades aparentment perdudes, veure <<_undoing>>.

==== Els tres estats

Ara, hem de prestar atenció.
Açò és el més important que hem de recordar sobre Git si volem que el nostre procés d'aprenentatge prossegueixi sense problemes.
Git té tres estats principals en els quals es poden trobar les teves dades: confirmat (commited), modificat (modified) i preparat (staged).
Confirmat significa que les dades s'han emmagatzemat de manera segura en la nostra base de dades local.
Modificat significa que hem modificat un arxiu però que encara no hem confirmat els canvis en la nostra base de dades.
Preparat vol dir que hem modificat un arxiu i l'hem marcat per a fer la nostra pròxima confirmació.

Això ens porta a les tres seccions principals d'un projecte de Git: el directori de Git (git directory), el directori de treball (the working tree) i l'àrea de preparació (staging area).


.Working tree, staging area, and Git directory.
image::images/areas.png["Working tree, staging area, and Git directory."]

El directori de git és on Git emmagatzema les metadades i la base de dades per al nostre projecte.
Açò és la part més important de Git, i és el que còpia quan clonem un repositori des d'un altre ordinador.

El directori de treball és una còpia d'una versió del projecte.
Aquests arxius es treuen de la base de dades comprimida en el directori de Git, i es col·loquen en el disc perquè puguem usar-los o modificar-los.

L'àrea de preparació és un arxiu, generalment al nostre directori de Git, que emmagatzema la informació sobre el que anirà a la nostra pròxima confirmació.
De vegades es denomina índex (``index''), però també és comú referir-se a ell com l'àrea de preparació.

El flux de treball bàsic de Git seria així:

1. Modifiquem els arxius en la nostra àrea de treball.
2. Preparem els arxius, afegint-los a l'àrea de preparació.
3. Confirmem els canvis, i Git pren els arxius tal com estan en l'àrea de preparació i emmagatzema aquesta instantània de manera permanent en el directori de Git.

Si una versió particular d'un arxiu és al directori de Git, es considera confirmada (commited).
I si s'ha canviat des que va ser confirmar, però no s'ha afegit a l'àrea de preparació, l'arxiu està modificat.
Al capítol <<_git_basics_chapter>> aprendrem més d'aquests tres estats i com podem treure avantatge d'ells u ometre els canvis preparats per complet.
