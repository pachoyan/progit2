=== Fonaments de Git

Que és git en poques paraules?
Aquesta secció es important, perquè si entens que és Git i els fonaments de com funciona, aleshores utilitzar Git serà molt més fácil.
A mesura que aprens git, tracta d'aclarir les coses que ja saps the altres VCSs, com Subversion i Perforce, fent-ho t'ajudarà a evitar petites confusions sobre quan utilizar aquesta eina.
Git emmagatzema i maneja molt diferent la informació en comparació a aquests altres sistemes, encara que la interfície d'usuari is molt similar, i entendre aquestes diferències t'ajudará a prevenir que el confonguis mentre ho utilitzes.(((Subversion)))(((Perforce)))

==== Còpies Instantànies, Sense Difèrencies

La major diferència entre Git i altres VCS (Subversion i amics) es la manera que Git maneja les seves dades.
Conceptualment, la majoria dels sistemes emmagatzemen la infromació com una llista de canvis en els arxius.
Aquests sistemes (CVS, Subversion, Perforce, Bazaar i etcètera) manegen la informació que emmagatzemen com un conjunt de arxius i el els canvis fets a cada arxiu al llarg del temps.

.Storing data as changes to a base version of each file.
image::images/deltas.png[Storing data as changes to a base version of each file.]

Git no maneja ni emmagatzema les seues dades d'aquesta manera. En canvi, Git maneja més les dades com un conjunt de còpies instantànies d'un sistema d'arxius en miniatura.
Cada vegada que confirmes un canvi, o guardes l'estat del teu projecte a Git, bàsicament pren una instantània del aspecte dels teus arxius en aquest moment i emmagatzema una referència a aquesta instantània.
Per ser eficient, si els arxius no han canviat, Git no emmagatzema el arxiu un altra vegada, només un enllaç al anterior arxiu idèntic que te emmagatzemat.
Git maneja les dades més com una *secuència de instantànies*.


.Storing data as snapshots of the project over time.
image::images/snapshots.png[Git stores data as snapshots of the project over time.]

Això es una diferència important entre Git i gairebé els altres VCSs.
Fa que Git reconsidere casi cada aspecte dels control de versions que altres sistemes van copiar de la generació anterior.
Això fa que Git sigui més com un mini sistema d'arxius amb eines increïblement poderoses desenvolupades sobre ell, en comparació a un VCS simple.
Explorarem alguns dels beneficis que obtens al manejar les dades d'aquesta manera quan veiem la ramificació (branching) en Git <<_git_branching>>.

==== Casi totes les operacions són locals

La majoria d'operacions en Git només necessiten arxius locals i recursos locals per operar - generalment cap informació es necessària d'un altre ordeinador de la teva xarxa.
Si estas acostumat a CVCS on la majoria de les operacions tenen el cost afegit del retard de la xarxa, aquest aspecte en Git et farà pensar que els déus de la velocitat han beneït a Git amb poders sobrenaturals.
Ja que tens la història sencera del projecte al teu disc local, la majoria de les operacions pareixen casi instànies.

Per exemple, per navegar per la història del projecte Git no necessita utilitzar el servidor per a obtindre la història i mostrartela - simplement llegeix directament de la teua base de dades en local.
Això significa que pots vore la història del teu projecte casi instantàniament.
Si vols vore els canvis introduïts entre la versió actual d'un arxiu i l'arxiu fa un mes, Git pot mirar el arxiu com era fa un mes i fer un càlcul local de la diferència, en lloc de fer una petició a un servidor remote u obtindre una versió antiga del arxiu d'un servidor remote per a fer-ho localment.

Això també significa que hi ha molt poc que no pots fer si estàs desconnectat o sense VPN.
Si estàs en un avió o un tren i vols fer un petit treball, tambó pots confirmar fins que el connectis a  una xarxa per penjar els canvis.
Si vas a casa i no tens un client VPN que funcione correctament, pots seguir treballant.
En altres sistemes, fer-ho es casi imposible o dolent.
En Perforce, per exemple, no pots fer molt si no estàs connectat al servidor, i en Subversion i CVS, pots editar arxius, pero no pots confirmar canvis a la teua base de dades (ja que la teua base de dades està desconnectada).
Aixo pot no semblar un gran problema, però potser et sorpengues la difèrencia que pot fer.

==== Git té integritat

Tot en git es verificat mitjançant una suma de comprobació (check-sum en anglés) abans de ser emmagatzemat, i s'identifica a partir d'aquest moment mitjançant aquesta suma.
Això vol dir que es impossible canviar els continguts de qualsevol arxiu o directory sense que Git sàpia sobre ells.
Aquesta funcionalitat està integrada en Git al més baix nivell i és part integral de la seva filosofia.
No pots perdre informació en trànsit o obtindre un arxiu corrupte sense que Git siga capaç de detectar-lo.

El mecanisme que Git usa per fer aquesta suma de comprobació s'anomena SHA-1 hash.(((SHA-1)))
Es tracta de una cadena de 40 caracters hexadecimals (0-9 i a-f) i es calcula basant-se en els continguts del arxiu o estructura del directori en Git. Un hash SHA-1 es veu de la següent forma:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

You will see these hash values all over the place in Git because it uses them so much.
In fact, Git stores everything in its database not by file name but by the hash value of its contents.

==== Git Generally Only Adds Data

When you do actions in Git, nearly all of them only add data to the Git database.
It is hard to get the system to do anything that is not undoable or to make it erase data in any way.
As in any VCS, you can lose or mess up changes you haven't committed yet; but after you commit a snapshot into Git, it is very difficult to lose, especially if you regularly push your database to another repository.

This makes using Git a joy because we know we can experiment without the danger of severely screwing things up.
For a more in-depth look at how Git stores its data and how you can recover data that seems lost, see <<_undoing>>.

==== The Three States

Now, pay attention.
This is the main thing to remember about Git if you want the rest of your learning process to go smoothly.
Git has three main states that your files can reside in: committed, modified, and staged.
Committed means that the data is safely stored in your local database.
Modified means that you have changed the file but have not committed it to your database yet.
Staged means that you have marked a modified file in its current version to go into your next commit snapshot.

This leads us to the three main sections of a Git project: the Git directory, the working tree, and the staging area.

.Working tree, staging area, and Git directory.
image::images/areas.png["Working tree, staging area, and Git directory."]

The Git directory is where Git stores the metadata and object database for your project.
This is the most important part of Git, and it is what is copied when you clone a repository from another computer.

The working tree is a single checkout of one version of the project.
These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.

The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit.
It's sometimes referred to as the ``index'', but it's also common to refer to it as the staging area.

The basic Git workflow goes something like this:

1. You modify files in your working tree.
2. You stage the files, adding snapshots of them to your staging area.
3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

If a particular version of a file is in the Git directory, it's considered committed.
If it has been modified and was added to the staging area, it is staged.
And if it was changed since it was checked out but has not been staged, it is modified.
In <<_git_basics_chapter>>, you'll learn more about these states and how you can either take advantage of them or skip the staged part entirely.
